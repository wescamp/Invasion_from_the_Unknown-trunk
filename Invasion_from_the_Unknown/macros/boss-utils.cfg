#textdomain wesnoth-Invasion_from_the_Unknown

#define BOSS_SCENARIO _EPISODE _LEVELNUM _TITLE
    id={_LEVELNUM}_E{_EPISODE}_Boss
    name={_TITLE}
    {MAP {_LEVELNUM}_E{_EPISODE}_Boss.map}
    turns=-1
    victory_when_enemies_defeated=no
    #theme=ShadowMaster_Boss_Area
#enddef

#define BOSS_SCENARIO_WITH_MUSIC _EPISODE _LEVELNUM _TITLE _MUSFILE
    id={_LEVELNUM}_E{_EPISODE}_Boss
    name={_TITLE}
    {MAP {_LEVELNUM}_E{_EPISODE}_Boss.map}
    turns=-1
    victory_when_enemies_defeated=no
    {SCENARIO_MUSIC {_MUSFILE} }
    #theme=ShadowMaster_Boss_Area
#enddef

# The pop-up message that appears when the players encounters
# an episode boss in the RPG scenarios. Made it a macro to keep it easier
# to modify across the entire campaign.
#define BOSS_POPUP
    [print]
        text= _ "Enemy boss sighted!"
        red,green,blue=255,127,0
        size=32
    [/print]
#enddef

#define BOSS_AMBIENTANCE
    [music]
        name=vengeful.ogg
        immediate=yes
    [/music]

    {BOSS_POPUP}
#enddef

#define IS_BOSS
    overlays=misc/boss-icon.png
    random_traits=no
#enddef

# The following macro is used in gauntlet scenarios to store a list of units
# that are to be recalled (recall "meta list") in the following scenario, thus eliminating
# the need of role-conditionals and such in prestart events
# This macro is intended to be used in victory events
#define GAUNTLET_SAVE_RECALL_METALIST
    {VARIABLE recall_metalist_enabled "no"}
    [store_unit]
        variable=metalist_piggy
        kill=no
        # Store non-heroes that have valid locations (i.e. not in recall list atm, but
        # rather in the actual map)
        [filter]
            x=1-1000
            y=1-1000
            side=1
            [not]
                id=Galas
            [/not]
            [not]
                id=Mal Keshar
            [/not]
            [not]
                id=Elynia
            [/not]
            [not]
                id=Erathan
            [/not]
            [not]
                id=Igor
            [/not]
            [not]
                id=Lédinor
            [/not]
        [/filter]
    [/store_unit]
    # metalist_piggy may use a lot of memory/disk space that would be wasted, as all we
    # need to recall an unit is its id, no images, no attack code, etc.
    # So to save space in the savefile and memory buffers related to it, we copy each
    # metalist_piggy's unit entry's id onto recall_metalist, the light-weight
    # final metalist storage space.
    [if]
        {VARIABLE_NUM_GREATER_THAN metalist_piggy.length 0}
        [then]
            {VARIABLE recall_metalist_enabled "yes"}
            {FOREACH metalist_piggy j}
                {VARIABLE recall_metalist[$j] ($metalist_piggy[$j].id)}
            {NEXT j}
        [/then]
    [/if]
    {CLEAR_VARIABLE metalist_piggy}
#enddef

# Recalls unit from the recall-"metalist", by iterating over it and doing
# recall for each inner item. This metalist is nothing else than an array of
# $unit.id fields
# This macro is intended to be used after recalling all heroes in a prestart event
#define GAUNTLET_RECALL_METALIST
    [if]
        {VARIABLE_LEXICAL_EQUALS recall_metalist_enabled "yes"}
        [then]
            {FOREACH recall_metalist k}
                [recall]
                    id=$recall_metalist[$k]
                    show=no
                [/recall]
            {NEXT k}
        [/then]
    [/if]
    # Clean up
    {CLEAR_VARIABLE recall_metalist}
    {CLEAR_VARIABLE recall_metalist_enabled}
#enddef

#define BOSS_OBJECTIVES_TO_WIN
    {OBJECTIVE_TO_WIN ( _ "Defeat the enemy boss")}
#enddef

# wmlindent: start ignoring
#define BOSS_OBJECTIVES_FOOTNOTE
    _ "This is a boss scenario. You may recruit or recall troops during the first turn only, until all your recruitment space is used. Your per-turn income is set to zero."#enddef
#define ENEMY_RESPAWNING_WARNING
    _ "Most enemies respawn two or more turns after you kill them, so try to get away from their initial locations as quickly as possible."#enddef
# wmlindent: stop ignoring

#define BOSS_UNIT_OVERLAY
    overlays=misc/boss-icon.png
#enddef

# Spawn a boss unit with the required stats boost. Note that its level will always be increased
# one unit from the base level value
#
# Parameters description:
#   _TYPE: the unit type string
#   _ID: the unit's internal id
#   _UDESC: the unit's visible/translatable name
#   _SIDE: the side number to which this unit pertains
#   _X, _Y: 2D coordinates of the unit's initial location on map
#   _HITPOINTS_BOOST: boost value of the boss' hitpoints; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _MELEE_BOOST: boost value of the boss' melee damage per strike; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _MELEE_SBOOST: boost value of the boss' melee strikes number; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _RANGED_BOOST: boost value of the boss' ranged damage per strike; might be a percentage ("n%"), a number ("[+/-]n·), or nil ("")
#   _RANGED_SBOOST: boost value of the boss' ranged strikes number; might be a percentage ("n%"), a number ("[+/-]n·), or nil (""
#
#define SPAWN_BOSS_UNIT _TYPE _ID _UDESC _SIDE _X _Y _HITPOINTS_BOOST _MELEE_BOOST _MELEE_SBOOST _RANGED_BOOST _RANGED_SBOOST
    [unit]
        side={_SIDE}
        type={_TYPE}
        id={_ID}
        canrecruit=yes
        name={_UDESC}
        x={_X}
        y={_Y}
        {BOSS_UNIT_OVERLAY}
        random_traits=no
        unrenamable=yes
        [modifications]
            [trait]
                id=boss_stats_boost
                [effect]
                    apply_to=hitpoints
                    increase_total={_HITPOINTS_BOOST}
                [/effect]
                [effect]
                    apply_to=attack
                    range=melee
                    increase_damage={_MELEE_BOOST}
                    increase_attacks={_MELEE_SBOOST}
                [/effect]
                [effect]
                    apply_to=attack
                    range=ranged
                    increase_damage={_RANGED_BOOST}
                    increase_attacks={_RANGED_SBOOST}
                [/effect]
            [/trait]
        [/modifications]
        [variables]
            # RESERVED FOR FUTURE UTILITY FILTERS
            is_boss=yes
        [/variables]
    [/unit]
    # Changing level after spawning to avoid being overwritten by the unit_type object contents when
    # creating the unit from the [unit] tag
    [store_unit]
        [filter]
            id={_ID}
        [/filter]
        variable=boss_unit_store
    [/store_unit]
    {VARIABLE_INC boss_unit_store.level}
    [unstore_unit]
        find_vacant=no
        variable=boss_unit_store
    [/unstore_unit]
    {CLEAR_VARIABLE boss_unit_store}
#enddef

# This is the shared recruitment code for RPG boss scenarios.
# Based on ideas suggested by various players (thanks'em all!) in the forums
#define BOSS_SCENARIO_PLAYER_RECRUITMENT
    [event]
        name=prestart
        # Setup a provisory keep for player
        {VARIABLE boss_pkeep_ttype "Ke"}
        {VARIABLE boss_pcastle_ttype "Ce"}

        [modify_side]
            side=1
            income=-2
        [/modify_side]

        [store_starting_location]
            side=1
            variable=boss_side1_starting_location
        [/store_starting_location]

        [store_locations]
            variable=boss_side1_starting_adjacent_locations
            radius=1
            x=$boss_side1_starting_location.x
            y=$boss_side1_starting_location.y
        [/store_locations]

        {FOREACH boss_side1_starting_adjacent_locations k}
            [terrain]
                x=$boss_side1_starting_adjacent_locations[$k].x
                y=$boss_side1_starting_adjacent_locations[$k].y
                terrain=$boss_pcastle_ttype # wmllint: ignore
            [/terrain]
        {NEXT k}
        [terrain]
            x=$boss_side1_starting_location.x
            y=$boss_side1_starting_location.y
            terrain=$boss_pkeep_ttype # wmllint: ignore
        [/terrain]
        # Not clearing the stored locations variables, as we need them for turn 2 event...
        {CLEAR_VARIABLE boss_pkeep_ttype}
        {CLEAR_VARIABLE boss_pcastle_ttype}
    [/event]

    # Facilities to set gold to 0 and disable recruiting on turn 2; after that, gold and
    # recruitment list are restored at victory event
    [event]
        name=turn 2
        [store_side]
            side=1
            variable=boss_side1_store
        [/store_side]
        {VARIABLE side1_restore_info.recruit $boss_side1_store.recruit}
        {VARIABLE side1_restore_info.gold $boss_side1_store.gold}
        [modify_side]
            side=1
            gold=0
        [/modify_side]
        {DISALLOW_RECRUIT 1 $side1_restore_info.recruit}
        {CLEAR_VARIABLE boss_side1_store}
        # Remove the provisory castle and keep for side 1 now
        {FOREACH boss_side1_starting_adjacent_locations k}
            [terrain]
                x=$boss_side1_starting_adjacent_locations[$k].x
                y=$boss_side1_starting_adjacent_locations[$k].y
                terrain=Re
            [/terrain]
        {NEXT k}
        [terrain]
            x=$boss_side1_starting_location.x
            y=$boss_side1_starting_location.y
            terrain=Re
        [/terrain]
        # Redraw just in case more 'new turn' or 'turn 2' events are queued,
        # so that in case they display messages or something else the map doesn't look weird
        {REDRAW}
        {CLEAR_VARIABLE boss_side1_starting_location}
        {CLEAR_VARIABLE boss_side1_starting_adjacent_locations}
    [/event]

    [event]
        name=victory
        [modify_side]
            side=1
            recruit=$side1_restore_info.recruit
            gold=$side1_restore_info.gold
        [/modify_side]
        {CLEAR_VARIABLE side1_restore_info}
        # Restore non-loyaltiness
        [store_unit]
            [filter]
                side=1
                x=1-100
                y=1-100
                {NOT canrecruit=yes}
                {NOT id=Anlindë}
                {NOT id=Elynia}
                {NOT (id=Mal Keshar)}
                {NOT id=Althurin}
                {NOT id=Lédinor}
                {NOT (id=King Asthorgar)}
                {NOT id=Erathan}
                {NOT id=Igor}
            [/filter]
            kill=no
            variable=noloyalty_store
        [/store_unit]
        {FOREACH noloyalty_store k}
            {VARIABLE noloyalty_store[$k].upkeep $noloyalty_store[$k].variables.temp_boss_scenario_upkeep_former}
            {CLEAR_VARIABLE noloyalty_store[$k].variables.temp_boss_scenario_upkeep_former}
            [unstore_unit]
                variable=noloyalty_store[$k]
                find_vacant=no
            [/unstore_unit]
        {NEXT k}
        {CLEAR_VARIABLE noloyalty_store}
    [/event]

    # Make recalled and recruited units loyal for the remaining of this scenario
    [event]
        name=prerecruit
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {VARIABLE unit.variables.temp_boss_scenario_upkeep_former $unit.upkeep}
        {VARIABLE unit.upkeep loyal}
        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
    [event]
        name=prerecall
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {VARIABLE unit.variables.temp_boss_scenario_upkeep_former $unit.upkeep}
        {VARIABLE unit.upkeep loyal}
        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef

#define FINAL_SCENARIO_PLAYER_RECRUITMENT
    [event]
        name=prestart
        # Setup a provisory keep for player
        {VARIABLE boss_pkeep_ttype "Ke"}
        {VARIABLE boss_pcastle_ttype "Ce"}

        [modify_side]
            side=1
            income=-2
        [/modify_side]

        [store_starting_location]
            side=1
            variable=boss_side1_starting_location
        [/store_starting_location]

        [store_locations]
            variable=boss_side1_starting_adjacent_locations
            radius=1
            x=$boss_side1_starting_location.x
            y=$boss_side1_starting_location.y
        [/store_locations]

        {FOREACH boss_side1_starting_adjacent_locations k}
            [terrain]
                x=$boss_side1_starting_adjacent_locations[$k].x
                y=$boss_side1_starting_adjacent_locations[$k].y
                terrain=$boss_pcastle_ttype # wmllint: ignore
            [/terrain]
        {NEXT k}
        [terrain]
            x=$boss_side1_starting_location.x
            y=$boss_side1_starting_location.y
            terrain=$boss_pkeep_ttype # wmllint: ignore
        [/terrain]
        # Not clearing the stored locations variables, as we need them for turn 2 event...
        {CLEAR_VARIABLE boss_pkeep_ttype}
        {CLEAR_VARIABLE boss_pcastle_ttype}
    [/event]

    # Facilities to set gold to 0 and disable recruiting on turn 2
    [event]
        name=turn 2
        [store_side]
            side=1
            variable=boss_side1_store
        [/store_side]
        [modify_side]
            side=1
            gold=0
        [/modify_side]
        {DISALLOW_RECRUIT 1 $boss_side1_store.recruit}
        {CLEAR_VARIABLE boss_side1_store}
        # Remove the provisory castle and keep for side 1 now
        {FOREACH boss_side1_starting_adjacent_locations k}
            [terrain]
                x=$boss_side1_starting_adjacent_locations[$k].x
                y=$boss_side1_starting_adjacent_locations[$k].y
                terrain=Re
            [/terrain]
        {NEXT k}
        [terrain]
            x=$boss_side1_starting_location.x
            y=$boss_side1_starting_location.y
            terrain=Re
        [/terrain]
        # Redraw just in case more 'new turn' or 'turn 2' events are queued,
        # so that in case they display messages or something else the map doesn't look weird
        {REDRAW}
        {CLEAR_VARIABLE boss_side1_starting_location}
        {CLEAR_VARIABLE boss_side1_starting_adjacent_locations}
    [/event]

    # Make recalled and recruited units loyal for the remaining of this campaign
    [event]
        name=prerecruit
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {VARIABLE unit.upkeep loyal}
        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
    [event]
        name=prerecall
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {VARIABLE unit.upkeep loyal}
        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef
