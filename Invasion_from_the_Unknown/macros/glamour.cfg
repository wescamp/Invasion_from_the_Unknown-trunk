#textdomain wesnoth-Invasion_from_the_Unknown
# $Id: glamour.cfg 2183 2008-10-21 20:34:50Z shikadilord $

# "Originally, a 'glamour' was a spell cast over someone, particularly to change how things appeared to them."
#          -- source: English wikipedia (GNU FDL)
#
# Faerie Glamour ability code and other helper methods
# Written by Ignacio R. Morelle (Shadow Master) around last week of Dec. 2007, revised and
# tested on January 08th 2008, 02:45 AM

# GUI and WML indication that an unit has this ability
#define ABILITY_GLAMOUR
    [dummy]
        id=glamour
        name= _ "glamour"
        description= _ "Glamour:
All faeries can cast illusions on their enemies (or victims) that can be used to cloak themselves. However, it is not properly suited for combat, as it puts
 the faerie in a weak state and exposes her to physical attack.

A faerie may use the enhanced spell of glamour to transform herself completely into other creature that she knows and has learned about its anatomy and beha
vior. The unit that casts the spell during a turn, will not be able to morph back into its original form or another target until the next turn at the begin
of which the unit has been resting (that is, did not move or attack during the previous turn). The movement points are set to half the amount left before ca
sting the spell always. The original unit's traits and abilities are kept only when applicable. AMLAs (After-Maximum-Level-Advancements) are always discarde
d until the units morphs back into its original form.

The metamorphed faerie's maximum health may differ from her normal amoumt, depending on the target creature kind. This also applies when morphing back into her original form.

The experience points gained in the original form or a metamorphic form are not related, and the later are always discarded, unlike the original experience amount, which is stored between changes of state."
    [/dummy]
#enddef

#define GLAMOUR_DO_INITIALIZATION CASTER_STORE
    [set_variables]
        name={CASTER_STORE}.variables
        mode=merge
        [value]
            [glamour_status]
                active=no
                enabled=yes
                base_unit_type=${CASTER_STORE}.type
            [/glamour_status]
        [/value]
    [/set_variables]
#enddef

#define GLAMOUR_ASSERT CONDITION
    [if]
        [not]
            {CONDITION}
        [/not]
        [then]
            {LOG_IFTU_ERR ("ASSERTION FAILED (#0001)")}

            [message]
                speaker=narrator
                image=wesnoth-icon.png
                caption="Run-time inconsistency detected"
                message="Internal inconsistency #0001 detected. The game will exit now; please inform of this error message to the scenario author with all the details possible of how to reproduce the situation."
            [/message]

            [endlevel]
                result=defeat
            [/endlevel]
        [/then]
    [/if]
#enddef

#
# Register a single glamour variation, including its internal id, language name and unit
# baseframe, applying an RC markup if desirable. It also stores a max_hitpoints value to keep
# optimized the menu displaying. However, it is possible that it's necessary to come back to the
# scenario that did the register process when that value is modified at [unit_type] level.
#
# Note that glamour variations already registered may be disabled separately.
#
#define GLAMOUR_REGISTER_VARIATION CASTER_STORE NAME
    {VARIABLE ci ${CASTER_STORE}.variables.glamour_status.targets.length}
    {VARIABLE cj -1}

    # Find variation data
    {FOREACH {CASTER_STORE}.variation i}
        [if]
            {VARIABLE_LEXICAL_EQUALS {CASTER_STORE}.variation[$i].variation_name {NAME} }
            [then]
                {VARIABLE cj $i}
            [/then]
        [/if]
    {NEXT i}

    {GLAMOUR_ASSERT ({VARIABLE_NUMERICAL_GREATER_OR_EQUAL_THAN cj 0})}

    # And use it to build cache
    [set_variables]
        name={CASTER_STORE}.variables.glamour_status.targets[$ci]
        mode=insert
        [value]
            variation_name={NAME}
            enabled=yes
            menu_string="&"+"${CASTER_STORE}.variation[$cj].image|~TC(${CASTER_STORE}.side,${CASTER_STORE}.variation[$cj].flag_rgb|)"+"="+"${CASTER_STORE}.variation[$cj].name"
            max_hitpoints=${CASTER_STORE}.variation[$cj].hitpoints
            max_moves=${CASTER_STORE}.variation[$cj].movement
        [/value]
    [/set_variables]
#enddef

#define __GLAMOUR_DO_DEMORPH SUF
    [fire_event]
        name="glamour demorph internal"
        [primary_unit]
            {SUF}
        [/primary_unit]
    [/fire_event]
#enddef

#define GLAMOUR_INIT_STUB
    [event]
        #
        # De-morph code converted into a custom internal event to avoid
        # clutter and global slowdown caused by macro expansion.
        #
        # Overloading this event handler may cause unpredictable results.
        #
        name="glamour demorph internal"
        first_time_only="no"

        # Fire any previous events
        [fire_event]
            name=preglamour out
            [primary_unit]
                id=$unit.id
            [/primary_unit]
        [/fire_event]

        # $unit may become completely invalid later, so create
        # a separate store.
        [store_unit]
            [filter]
                id=$unit.id
            [/filter]
            variable=temp_glamour_stored_morphed_unit
        [/store_unit]

        # Pathetic attempt at C++ references in WML  :-(
        # Preprocessor macros have a wider effect area for slowdown, so they
        # are not a good option.
        {VARIABLE base_unit_ref "temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data"}
        {VARIABLE act_unit_ref  "temp_glamour_stored_morphed_unit"                                        }

        # Set remaining movement points to half the current amount, or to the base maximum, whichever
        # is the least. Also set resting to false.
        {VARIABLE_DIV $act_unit_ref|.moves 2}
        {VARIABLE_NUMERICAL_MINIMUM ($base_unit_ref|.max_moves) ($act_unit_ref|.moves) ($base_unit_ref|.moves)}

        # Calculate current HP fraction of the morphed unit
        {VARIABLE_REALDIV (morphed_hp_fraction)
                          ($$act_unit_ref|.hitpoints)
                          ($$act_unit_ref|.max_hitpoints)
        }
        # Apply that to base unit
        {VARIABLE     $base_unit_ref|.hitpoints ($$base_unit_ref|.max_hitpoints)}
        {VARIABLE_MUL $base_unit_ref|.hitpoints ($morphed_hp_fraction.real)     }

        # Set other nonpersistent stats from actual morphed unit
        # (AMLAs and other objects are discarded on purpose)
        [set_variables]
            name="$base_unit_ref"
            mode="merge"
            [value]
                x,y="$$act_unit_ref|.x","$$act_unit_ref|.y"
                attacks_left="$$act_unit_ref|.attacks_left"
                canrecruit="$$act_unit_ref|.canrecruit"
                resting="no"
                [variables]
                    [glamour_status]
                        active="no"
                    [/glamour_status]
                [/variables]
            [/value]
        [/set_variables]

        # Copy unit status
        [set_variables]
            name="$base_unit_ref|.status"
            mode="replace"
            to_variable="$act_unit_ref|.status"
        [/set_variables]

        # Unstore base unit
        [unstore_unit]
            variable=$base_unit_ref
            find_vacant=no
        [/unstore_unit]

        # Fire any post events using the original id from SUF
        [fire_event]
            name=glamour out
            [primary_unit]
                id=$$base_unit_ref|.id
            [/primary_unit]
        [/fire_event]

        # Clean-up
        {CLEAR_VARIABLE $act_unit_ref}
        {CLEAR_VARIABLE base_unit_ref,act_unit_ref,morphed_hp_fraction}
    [/event]

    [event]
        name="victory"
        [store_unit]
            [filter]
                side=1
                [not]
                    x=recall
                    y=recall
                [/not]
                [filter_wml]
                    [variables]
                        [glamour_status]
                            enabled=yes
                            active=yes
                        [/glamour_status]
                    [/variables]
                [/filter_wml]
            [/filter]
            kill=no
            variable=temp_demorphing_list
        [/store_unit]
        {FOREACH temp_demorphing_list i}
            {__GLAMOUR_DO_DEMORPH (
                x=$temp_demorphing_list[$i].x
                y=$temp_demorphing_list[$i].y
            )}
        {NEXT i}
        {CLEAR_VARIABLE temp_demorphing_list}
    [/event]
#enddef

#
# Less generic glamour code.
# Stuff that characters say on first glamour demonstration.
#
#define GLAMOUR_EVENTS
    [event]
        name=glamour out
        [if]
            {VARIABLE_BOOLEAN_EQUALS glamour_1st_time yes}
            [then]
                {VARIABLE glamour_1st_time no}

                [message]
                    speaker=unit
                    message= _"Ahhhh! Back to normal."
                [/message]
            [/then]
        [/if]
    [/event]

    [event]
        name=preglamour in
        [if]
            {VARIABLE_BOOLEAN_EQUALS glamour_1st_time yes}
            [then]
                [redraw][/redraw]

                [scroll_to]
                    x,y=$x1|,$y1
                [/scroll_to]

                [message]
                    speaker=narrator
                    message= _"You slowly feel like if your body was vanishing. And that is what it does indeed. Your surroundings disappear for a moment, and there is silence..."
                [/message]
            [/then]
        [/if]
    [/event]

    [event]
        name=glamour in
        [if]
            {VARIABLE_BOOLEAN_EQUALS glamour_1st_time yes}
            [then]
                [redraw][/redraw]

                [scroll_to]
                    x,y=$x1|,$y1
                [/scroll_to]

                [message]
                    speaker=narrator
                    message= _"... and suddenly you can see again. But your body is not the same as before. Its new structure is completely alien to you, and you do great struggle to stand up."
                [/message]

                [if]
                    {VARIABLE_LEXICAL_EQUALS unit.id "Elynia"}
                    [then]
                        {MSG_UNIT (Mal Keshar) ( _ "Oh... my... god. No, seriously, what wicked devilry is this?")}
                        {MSG_UNIT (Erathan) ( _ "Surely I have never seen anything like... like this.")}
                    [/then]
                [/if]
            [/then]
        [/if]
    [/event]
#enddef

# Interface WML block to be called from a prestart event
#define GLAMOUR_UI_SETUP
    [set_menu_item]
        id=glamour_cmd_castspell
        image=icons/menu-glamour.png
        description= _ "Cast spell of glamour"

        [show_if]
            [have_unit]
                x=$x1
                y=$y1
                [filter_wml]
                    resting=yes
                    [variables]
                        [glamour_status]
                            enabled=yes
                        [/glamour_status]
                    [/variables]
                [/filter_wml]
            [/have_unit]
        [/show_if]

        [filter_location]
            [not]
                # List of impassable terrain strings
                terrain=Xu,Xv,*^Xm,Qxu,Qxs,Ql,Qlf,*^Yz,Qxv,*^Z/,*^Z\,Uu^Zb
            [/not]
        [/filter_location]
        # FIXME: was this for preventing it from triggering with invalid
        # x,y if user clicked out of map bounds?
        [filter_location]
        [/filter_location]

        [command]
            [allow_undo][/allow_undo] # for now...
            [redraw][/redraw]

            # -1 : back to normal
            # -2 or less : do nothing
            {VARIABLE temp_glamour_choice -2}

            # Generate message WML store
            [set_variables]
                name=temp_msg_store
                [value]
                    speaker="narrator"
                    image="attacks/touch-faerie.png"
                    caption= _ "Spell of glamour"
                    message= _ "What creature should this unit transform into?"
                [/value]
            [/set_variables]

            # Generate dynamic options
            {FOREACH unit.variables.glamour_status.targets k}
                [if]
                    {VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.targets[$k].enabled yes}
                    [then]
                        [set_variables]
                            name=temp_msg_store.option
                            mode=append
                            # Must do $k expansion NOW!
                            [value]
                                message=$unit.variables.glamour_status.targets[$k].menu_string
                                [show_if]
                                    {VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.active no}
                                [/show_if]
                                [command]
                                    {VARIABLE temp_glamour_choice $k}
                                [/command]
                            [/value]
                        [/set_variables]
                    [/then]
                [/if]
            {NEXT k}

            # Append static options
            [set_variables]
                name=temp_msg_store.option
                mode=append
                [literal]
                    message="&"+"attacks/entangle.png"+"="+_"Back to normal"
                    [show_if]
                        {VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.active yes}
                    [/show_if]
                    [command]
                        {VARIABLE temp_glamour_choice -1}
                    [/command]
                [/literal]
                [literal]
                    message="*&"+"attacks/blank-attack.png"+"="+{STR_CANCEL}
                [/literal]
            [/set_variables]

            # Commit changes to game_events manager
            [insert_tag]
                name="message"
                variable="temp_msg_store"
            [/insert_tag]

            {CLEAR_VARIABLE temp_msg_store}

            [if]
                {VARIABLE_NUMERICAL_GREATER_OR_EQUAL_THAN temp_glamour_choice 0}
                [then]
                    # Last frontier of safety; a last sanity check that should always be passed unless
                    # the logic of this code or the WMI engine are completely broken.
                    {GLAMOUR_ASSERT ({VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.active no})}

                    # autostored variables may become invalid, so clone x1 and y1
                    {VARIABLE _x1 $x1}
                    {VARIABLE _y1 $y1}

                    # Fire any previous events
                    [fire_event]
                        name=preglamour in
                        [primary_unit]
                            x,y="$_x1","$_y1"
                        [/primary_unit]
                    [/fire_event]

                    # Store base unit (clone $unit)
                    [store_unit]
                        [filter]
                            x,y="$_x1","$_y1"
                        [/filter]
                        variable=temp_glamour_base_unit
                    [/store_unit]

                    # Fake reference to long variable name
                    {VARIABLE morphed_type_ref "temp_glamour_base_unit.variables.glamour_status.targets[$temp_glamour_choice]"}

                    # Create a partial store for morphed unit
                    [set_variables]
                        name="temp_glamour_morphed_unit"
                        mode="replace"
                        [value]
                            id="$temp_glamour_base_unit.id"
                            name="$temp_glamour_base_unit.name"
                            side="$temp_glamour_base_unit.side"
                            type="$temp_glamour_base_unit.type"
                            variation="$$morphed_type_ref|.variation_name"
                            x="$temp_glamour_base_unit.x"
                            y="$temp_glamour_base_unit.y"
                            attacks_left="$temp_glamour_base_unit.attacks_left"
                            canrecruit="$temp_glamour_base_unit.canrecruit"
                            overlays="$temp_glamour_base_unit.overlays"
                            resting="no"
                            upkeep="$temp_glamour_base_unit.upkeep"

                            [variables]
                                [glamour_status]
                                    active  = "yes"
                                    enabled = "yes"
                                [/glamour_status]
                            [/variables]
                        [/value]
                    [/set_variables]

                    # Copy status
                    [set_variables]
                        name="temp_glamour_morphed_unit.status"
                        mode="replace"
                        to_variable="temp_glamour_base_unit.status"
                    [/set_variables]

                    # Copy traits
                    [set_variables]
                        name="temp_glamour_morphed_unit.modifications.trait"
                        mode="replace"
                        to_variable="temp_glamour_base_unit.modifications.trait"
                    [/set_variables]

                    # We do not copy AMLAs or objects; they are often used to add
                    # new attacks or other fancy stuff not compatible with the spirit
                    # of the glamour ability.

                    # Set new remaining movement points to half the current amount, or to the
                    # morphed maximum, whichever is the least.
                    {VARIABLE                   temp_new_mp $temp_glamour_base_unit.moves}
                    {VARIABLE_DIV               temp_new_mp 2}
                    {VARIABLE_NUMERICAL_MINIMUM
                        (temp_new_mp)
                        ($morphed_type_ref|.max_moves)
                        (temp_glamour_morphed_unit.moves)
                    }

                    # Calculate current HP fraction of the base unit
                    {VARIABLE_REALDIV original_hp_fraction $temp_glamour_base_unit.hitpoints $temp_glamour_base_unit.max_hitpoints}
                    # Apply fraction on max HP for morphed stats
                    {VARIABLE     temp_glamour_morphed_unit.hitpoints ($$morphed_type_ref|.max_hitpoints)}
                    {VARIABLE_MUL temp_glamour_morphed_unit.hitpoints ($original_hp_fraction.real)       }

                    # Embed $temp_glamour_base_unit for demorph event reference on
                    # record.
                    [set_variables]
                        name="temp_glamour_morphed_unit.variables.glamour_status.base_unit_data"
                        mode="replace"
                        to_variable="temp_glamour_base_unit"
                    [/set_variables]

                    # Use recorded stats to spawn morphed unit - missing data
                    # set automatically by engine as of version 1.5.3.
                    [unstore_unit]
                        variable=temp_glamour_morphed_unit
                        find_vacant=no
                    [/unstore_unit]

                    # Fire any post events
                    [fire_event]
                        name=glamour in
                        [primary_unit]
                            x,y="$_x1","$_y1"
                        [/primary_unit]
                    [/fire_event]

                    # Cleanup
                    {CLEAR_VARIABLE "temp_glamour_base_unit,temp_glamour_morphed_unit,temp_new_mp,original_hp_fraction"}
                    {CLEAR_VARIABLE "_x1,_y1,morphed_type_ref"}
                [/then]
                [else]
                    [if]
                        {VARIABLE_NUMERICAL_EQUALS temp_glamour_choice -1}
                        [then]
                            {__GLAMOUR_DO_DEMORPH (x,y="$x1","$y1")}
                        [/then]
                    [/if]
                [/else]
            [/if]
            # Cleanup
            {CLEAR_VARIABLE temp_glamour_choice}
        [/command]
    [/set_menu_item]
#enddef
